// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(uuid())
  email       String       @unique
  username    String       @unique
  password    String
  createdAt   DateTime     @default(now())
  updateAt    DateTime     @updatedAt
  accessToken AccessToken?
  saves       Save[]

  @@index([email])
}

model AccessToken {
  id        String   @id @default(uuid())
  value     String   @db.LongText
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
}

model Save {
  id              String            @id @default(uuid())
  createdAt       DateTime          @default(now())
  
  ProductsOnSaves ProductsOnSaves[]

  User   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String?
}

model Product {
  id              Int               @id 
  name            String
  category        String
  netWeight       Float
  servingAmount   Float
  servingSize     Float
  energyTotal     Int
  energyFat       Int
  fatTotal        Float
  saturatedFat    Float
  protein         Int
  carbohydrate    Int
  sugar           Float
  natrium         Int
  fatGrade        String
  fatLevel        Int
  sugarGrade      String
  sugarLevel      Int
  natriumGrade    String
  natriumLevel    Int
  gradeAll        String
  levelAll        Int
  createdAt       DateTime          @default(now())
  updateAt        DateTime          @updatedAt
  
  ProductsOnSaves ProductsOnSaves[]

  @@index([name])
}

model ProductsOnSaves {
  quantity  Int     @default(1)
  save      Save    @relation(fields: [saveId], references: [id], onDelete: Cascade)
  saveId    String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int

  @@id([saveId, productId])
}
